import os
import logging
import requests
from telegram import Update
from telegram.ext import Application, CommandHandler, ContextTypes

# === –ù–ê–°–¢–†–û–ô–ö–ò ===
BOT_TOKEN = os.getenv("BOT_TOKEN", "8307843956:AAF13N0wPXv9OZr6WCgFTVFWAYZ-0LBhUSc")
CHANNEL_ID = os.getenv("CHANNEL_ID", "@IIHumorFuture")
ALLOWED_USER_ID = int(os.getenv("ALLOWED_USER_ID", "684685584"))
DEEPINFRA_API_KEY = os.getenv("DEEPINFRA_API_KEY")

logging.basicConfig(level=logging.INFO)

# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–æ–¥–ø–∏—Å–∏ —á–µ—Ä–µ–∑ DeepInfra (Llama 3) ---
def generate_ai_caption():
    if not DEEPINFRA_API_KEY:
        return "–ù–æ–≤–æ–µ –≤–∏–¥–µ–æ –æ—Ç –±—É–¥—É—â–µ–≥–æ! ü§ñ"

    url = "https://api.deepinfra.com/v1/openai/chat/completions"
    headers = {
        "Authorization": f"Bearer {DEEPINFRA_API_KEY}",
        "Content-Type": "application/json"
    }
    data = {
        "model": "meta-llama/Meta-Llama-3-8B-Instruct",
        "messages": [
            {"role": "system", "content": "–¢—ã ‚Äî –∞–≤—Ç–æ—Ä Telegram-–∫–∞–Ω–∞–ª–∞ –æ –≤–∏–¥–µ–æ, —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –ò–ò. –ü–∏—à–∏ –∫–æ—Ä–æ—Ç–∫–∏–µ, —Å–º–µ—à–Ω—ã–µ, —Ü–µ–ø–ª—è—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –ë–µ–∑ —Ö–µ—à—Ç–µ–≥–æ–≤."},
            {"role": "user", "content": "–ù–∞–ø–∏—à–∏ –ø–æ–¥–ø–∏—Å—å –∫ –Ω–æ–≤–æ–º—É –ò–ò-–≤–∏–¥–µ–æ."}
        ],
        "max_tokens": 80,
        "temperature": 0.85
    }
    try:
        response = requests.post(url, json=data, headers=headers, timeout=15)
        result = response.json()
        return result["choices"][0]["message"]["content"].strip()
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ DeepInfra: {e}")
        return "–ò–ò —Å–µ–≥–æ–¥–Ω—è –≤ —É–¥–∞—Ä–µ! ü§ñ"

# --- –ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≤–∏–¥–µ–æ (–ø–æ–∫–∞ –±–µ–∑ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏) ---
def generate_ai_video():
    # –ü–æ–∑–∂–µ –∑–∞–º–µ–Ω–∏–º –Ω–∞ Replicate/Kaiber
    return None  # –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–∏–¥–µ–æ

# --- –ö–æ–º–∞–Ω–¥–∞ /makevideo ---
async def make_video(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ALLOWED_USER_ID:
        await update.message.reply_text("üö´ –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return

    await update.message.reply_text("üß† –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ò–ò-–ø–æ–¥–ø–∏—Å—å...")

    caption_text = generate_ai_caption()
    full_caption = f"{caption_text}\n\n–°–æ–∑–¥–∞–Ω–æ —Å –ø–æ–º–æ—â—å—é [–ò–ò ü§ñ](https://t.me/IIHumorFuture)"

    # –ü–æ–∫–∞ –ø—É–±–ª–∏–∫—É–µ–º –¢–û–õ–¨–ö–û –ø–æ–¥–ø–∏—Å—å (–±–µ–∑ –≤–∏–¥–µ–æ)
    try:
        await context.bot.send_message(
            chat_id=CHANNEL_ID,
            text=full_caption,
            parse_mode="Markdown"
        )
        await update.message.reply_text("‚úÖ –ü–æ–¥–ø–∏—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞! (–í–∏–¥–µ–æ ‚Äî –≤ –±—É–¥—É—â–µ–º)")
    except Exception as e:
        await update.message.reply_text(f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
def main():
    app = Application.builder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("makevideo", make_video))
    logging.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()

if __name__ == "__main__":
    main()